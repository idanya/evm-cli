// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	abi "github.com/ethereum/go-ethereum/accounts/abi"
	common "github.com/ethereum/go-ethereum/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// NodeClient is an autogenerated mock type for the NodeClient type
type NodeClient struct {
	mock.Mock
}

type NodeClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeClient) EXPECT() *NodeClient_Expecter {
	return &NodeClient_Expecter{mock: &_m.Mock}
}

// ExecuteReadFunction provides a mock function with given fields: _a0, contractAddress, _a2, functionName, params
func (_m *NodeClient) ExecuteReadFunction(_a0 context.Context, contractAddress string, _a2 *abi.ABI, functionName string, params ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0, contractAddress, _a2, functionName)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *abi.ABI, string, ...interface{}) ([]interface{}, error)); ok {
		return rf(_a0, contractAddress, _a2, functionName, params...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *abi.ABI, string, ...interface{}) []interface{}); ok {
		r0 = rf(_a0, contractAddress, _a2, functionName, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *abi.ABI, string, ...interface{}) error); ok {
		r1 = rf(_a0, contractAddress, _a2, functionName, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_ExecuteReadFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteReadFunction'
type NodeClient_ExecuteReadFunction_Call struct {
	*mock.Call
}

// ExecuteReadFunction is a helper method to define mock.On call
//   - _a0 context.Context
//   - contractAddress string
//   - _a2 *abi.ABI
//   - functionName string
//   - params ...interface{}
func (_e *NodeClient_Expecter) ExecuteReadFunction(_a0 interface{}, contractAddress interface{}, _a2 interface{}, functionName interface{}, params ...interface{}) *NodeClient_ExecuteReadFunction_Call {
	return &NodeClient_ExecuteReadFunction_Call{Call: _e.mock.On("ExecuteReadFunction",
		append([]interface{}{_a0, contractAddress, _a2, functionName}, params...)...)}
}

func (_c *NodeClient_ExecuteReadFunction_Call) Run(run func(_a0 context.Context, contractAddress string, _a2 *abi.ABI, functionName string, params ...interface{})) *NodeClient_ExecuteReadFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*abi.ABI), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *NodeClient_ExecuteReadFunction_Call) Return(_a0 []interface{}, _a1 error) *NodeClient_ExecuteReadFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_ExecuteReadFunction_Call) RunAndReturn(run func(context.Context, string, *abi.ABI, string, ...interface{}) ([]interface{}, error)) *NodeClient_ExecuteReadFunction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountNonce provides a mock function with given fields: _a0, account
func (_m *NodeClient) GetAccountNonce(_a0 context.Context, account string) (uint64, error) {
	ret := _m.Called(_a0, account)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(_a0, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(_a0, account)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_GetAccountNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountNonce'
type NodeClient_GetAccountNonce_Call struct {
	*mock.Call
}

// GetAccountNonce is a helper method to define mock.On call
//   - _a0 context.Context
//   - account string
func (_e *NodeClient_Expecter) GetAccountNonce(_a0 interface{}, account interface{}) *NodeClient_GetAccountNonce_Call {
	return &NodeClient_GetAccountNonce_Call{Call: _e.mock.On("GetAccountNonce", _a0, account)}
}

func (_c *NodeClient_GetAccountNonce_Call) Run(run func(_a0 context.Context, account string)) *NodeClient_GetAccountNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NodeClient_GetAccountNonce_Call) Return(_a0 uint64, _a1 error) *NodeClient_GetAccountNonce_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_GetAccountNonce_Call) RunAndReturn(run func(context.Context, string) (uint64, error)) *NodeClient_GetAccountNonce_Call {
	_c.Call.Return(run)
	return _c
}

// GetContractCode provides a mock function with given fields: _a0, contractAddress
func (_m *NodeClient) GetContractCode(_a0 context.Context, contractAddress string) ([]byte, error) {
	ret := _m.Called(_a0, contractAddress)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(_a0, contractAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(_a0, contractAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, contractAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_GetContractCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContractCode'
type NodeClient_GetContractCode_Call struct {
	*mock.Call
}

// GetContractCode is a helper method to define mock.On call
//   - _a0 context.Context
//   - contractAddress string
func (_e *NodeClient_Expecter) GetContractCode(_a0 interface{}, contractAddress interface{}) *NodeClient_GetContractCode_Call {
	return &NodeClient_GetContractCode_Call{Call: _e.mock.On("GetContractCode", _a0, contractAddress)}
}

func (_c *NodeClient_GetContractCode_Call) Run(run func(_a0 context.Context, contractAddress string)) *NodeClient_GetContractCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NodeClient_GetContractCode_Call) Return(_a0 []byte, _a1 error) *NodeClient_GetContractCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_GetContractCode_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *NodeClient_GetContractCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetContractStorageSlot provides a mock function with given fields: _a0, contractAddress, key
func (_m *NodeClient) GetContractStorageSlot(_a0 context.Context, contractAddress string, key common.Hash) ([]byte, error) {
	ret := _m.Called(_a0, contractAddress, key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, common.Hash) ([]byte, error)); ok {
		return rf(_a0, contractAddress, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, common.Hash) []byte); ok {
		r0 = rf(_a0, contractAddress, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, common.Hash) error); ok {
		r1 = rf(_a0, contractAddress, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_GetContractStorageSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContractStorageSlot'
type NodeClient_GetContractStorageSlot_Call struct {
	*mock.Call
}

// GetContractStorageSlot is a helper method to define mock.On call
//   - _a0 context.Context
//   - contractAddress string
//   - key common.Hash
func (_e *NodeClient_Expecter) GetContractStorageSlot(_a0 interface{}, contractAddress interface{}, key interface{}) *NodeClient_GetContractStorageSlot_Call {
	return &NodeClient_GetContractStorageSlot_Call{Call: _e.mock.On("GetContractStorageSlot", _a0, contractAddress, key)}
}

func (_c *NodeClient_GetContractStorageSlot_Call) Run(run func(_a0 context.Context, contractAddress string, key common.Hash)) *NodeClient_GetContractStorageSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(common.Hash))
	})
	return _c
}

func (_c *NodeClient_GetContractStorageSlot_Call) Return(_a0 []byte, _a1 error) *NodeClient_GetContractStorageSlot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_GetContractStorageSlot_Call) RunAndReturn(run func(context.Context, string, common.Hash) ([]byte, error)) *NodeClient_GetContractStorageSlot_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByHash provides a mock function with given fields: _a0, txHash
func (_m *NodeClient) GetTransactionByHash(_a0 context.Context, txHash string) (*types.Transaction, error) {
	ret := _m.Called(_a0, txHash)

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Transaction, error)); ok {
		return rf(_a0, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Transaction); ok {
		r0 = rf(_a0, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_GetTransactionByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByHash'
type NodeClient_GetTransactionByHash_Call struct {
	*mock.Call
}

// GetTransactionByHash is a helper method to define mock.On call
//   - _a0 context.Context
//   - txHash string
func (_e *NodeClient_Expecter) GetTransactionByHash(_a0 interface{}, txHash interface{}) *NodeClient_GetTransactionByHash_Call {
	return &NodeClient_GetTransactionByHash_Call{Call: _e.mock.On("GetTransactionByHash", _a0, txHash)}
}

func (_c *NodeClient_GetTransactionByHash_Call) Run(run func(_a0 context.Context, txHash string)) *NodeClient_GetTransactionByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NodeClient_GetTransactionByHash_Call) Return(_a0 *types.Transaction, _a1 error) *NodeClient_GetTransactionByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_GetTransactionByHash_Call) RunAndReturn(run func(context.Context, string) (*types.Transaction, error)) *NodeClient_GetTransactionByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionReceipt provides a mock function with given fields: _a0, txHash
func (_m *NodeClient) GetTransactionReceipt(_a0 context.Context, txHash string) (*types.Receipt, error) {
	ret := _m.Called(_a0, txHash)

	var r0 *types.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Receipt, error)); ok {
		return rf(_a0, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Receipt); ok {
		r0 = rf(_a0, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_GetTransactionReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionReceipt'
type NodeClient_GetTransactionReceipt_Call struct {
	*mock.Call
}

// GetTransactionReceipt is a helper method to define mock.On call
//   - _a0 context.Context
//   - txHash string
func (_e *NodeClient_Expecter) GetTransactionReceipt(_a0 interface{}, txHash interface{}) *NodeClient_GetTransactionReceipt_Call {
	return &NodeClient_GetTransactionReceipt_Call{Call: _e.mock.On("GetTransactionReceipt", _a0, txHash)}
}

func (_c *NodeClient_GetTransactionReceipt_Call) Run(run func(_a0 context.Context, txHash string)) *NodeClient_GetTransactionReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NodeClient_GetTransactionReceipt_Call) Return(_a0 *types.Receipt, _a1 error) *NodeClient_GetTransactionReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_GetTransactionReceipt_Call) RunAndReturn(run func(context.Context, string) (*types.Receipt, error)) *NodeClient_GetTransactionReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeClient creates a new instance of NodeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeClient {
	mock := &NodeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
