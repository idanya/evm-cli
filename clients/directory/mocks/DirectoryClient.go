// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DirectoryClient is an autogenerated mock type for the DirectoryClient type
type DirectoryClient struct {
	mock.Mock
}

type DirectoryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DirectoryClient) EXPECT() *DirectoryClient_Expecter {
	return &DirectoryClient_Expecter{mock: &_m.Mock}
}

// LookupEvent provides a mock function with given fields: hash
func (_m *DirectoryClient) LookupEvent(hash string) (string, error) {
	ret := _m.Called(hash)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DirectoryClient_LookupEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupEvent'
type DirectoryClient_LookupEvent_Call struct {
	*mock.Call
}

// LookupEvent is a helper method to define mock.On call
//   - hash string
func (_e *DirectoryClient_Expecter) LookupEvent(hash interface{}) *DirectoryClient_LookupEvent_Call {
	return &DirectoryClient_LookupEvent_Call{Call: _e.mock.On("LookupEvent", hash)}
}

func (_c *DirectoryClient_LookupEvent_Call) Run(run func(hash string)) *DirectoryClient_LookupEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DirectoryClient_LookupEvent_Call) Return(_a0 string, _a1 error) *DirectoryClient_LookupEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DirectoryClient_LookupEvent_Call) RunAndReturn(run func(string) (string, error)) *DirectoryClient_LookupEvent_Call {
	_c.Call.Return(run)
	return _c
}

// LookupFunction provides a mock function with given fields: hash
func (_m *DirectoryClient) LookupFunction(hash string) (string, error) {
	ret := _m.Called(hash)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DirectoryClient_LookupFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupFunction'
type DirectoryClient_LookupFunction_Call struct {
	*mock.Call
}

// LookupFunction is a helper method to define mock.On call
//   - hash string
func (_e *DirectoryClient_Expecter) LookupFunction(hash interface{}) *DirectoryClient_LookupFunction_Call {
	return &DirectoryClient_LookupFunction_Call{Call: _e.mock.On("LookupFunction", hash)}
}

func (_c *DirectoryClient_LookupFunction_Call) Run(run func(hash string)) *DirectoryClient_LookupFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DirectoryClient_LookupFunction_Call) Return(_a0 string, _a1 error) *DirectoryClient_LookupFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DirectoryClient_LookupFunction_Call) RunAndReturn(run func(string) (string, error)) *DirectoryClient_LookupFunction_Call {
	_c.Call.Return(run)
	return _c
}

// NewDirectoryClient creates a new instance of DirectoryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDirectoryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DirectoryClient {
	mock := &DirectoryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
